# Derived from https://github.com/dereekb/dbx-components/blob/main/.circleci/config.yml
# SETUP REQUIRED - Visit all sections marked SETUP REQUIRED to finish up configuration. This requires changes on CircleCI's portal.
version: 2.1
defaults: &defaults
  working_directory: ~/code # "code" is our working directory
  resource_class: large
  docker:
    - image: cimg/node:22.14

orbs:
  nx: nrwl/nx@1.7.0
  node: circleci/node@7.1.0

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      # install node packages
      - node/install-packages
      # initialize nx
      - nx/set-shas
      # build
      - run: npx nx run-many --base=$NX_BASE --target=build --parallel --max-parallel=2
      # persist builds to workspace
      - persist_to_workspace:
          root: ~/code
          paths:
            - node_modules
            - dist
  # Runs tests for the projects that do not require the firebase emulators.
  test-with-node:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: run ANGULAR_APP_NAME tests
          command: npx nx test ANGULAR_APP_NAME
      - store_test_results:
          path: ~/code/.reports/jest/
  # Runs tests for the projects that require the firebase emulators.
  test-with-node-firebase:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      # install the emulator requirements
      - run: sudo apt-get update -y && sudo apt-get install -y curl openjdk-11-jre-headless
      # restore the emulators cache
      - restore_cache:
          key: firebase-cache-
      - run:
          name: run API_APP_NAME tests
          command: npx firebase --project=default emulators:exec --only auth,firestore,storage 'npx nx run-tests API_APP_NAME'
      - run:
          name: run E2E_APP_NAME tests
          command: npx firebase --project=default emulators:exec --only auth,firestore,storage,functions 'npx nx run-tests E2E_APP_NAME'
      # store the emulators cache
      - save_cache:
          key: firebase-cache-
          paths:
            - ~/.cache/firebase
      - store_test_results:
          path: ~/code/.reports/jest/
  # Performs release operations on the release branch.
  run-release-and-push-to-main:
    <<: *defaults
    environment:
      # SETUP REQUIRED - Set the git username and email to the desired values
      GIT_USER_EMAIL: CI_GIT_USER_EMAIL
      GIT_USER_NAME: CI_GIT_USER_NAME
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      # SETUP REQUIRED - Add an SSH key from GitHub to your project's CircleCI configuration. This is require to push changes to github
      # https://circleci.com/docs/2.0/add-ssh-key/#adding-ssh-keys-to-a-job
      - add_ssh_keys:
          fingerprints:
            - "SET_THIS_VALUE_TO_BE_VALID"
      - run:
          name: setup git
          command: git config user.email "$GIT_USER_EMAIL" && git config user.name "$GIT_USER_NAME"
      - run:
          name: build release
          command: npx nx run --parallel=1 workspace:version
      - run:
          # we grab the relevant tag names before swapping to main
          name: "setup env vars for git changes"
          command: echo -e "export DEV_TAG_ID=$(git describe --tags --abbrev=0 HEAD^)\nTAG_ID=$(git describe --tags --abbrev=0)" >> $BASH_ENV
      - run:
          # copy the commit message before we swap branches, or it will include unrelated changes. Move tag to the main branch after making the merge commit into main
          name: merge release into main and use the release commit message, move tag from release to main
          command: COMMIT_MESSAGE=$(git log $DEV_TAG_ID..release --pretty=%B | cat) && echo "merging new release ($TAG_ID) into main. Adding all commits since last dev tag ($DEV_TAG_ID)" && git checkout main && git merge release --squash -Xtheirs && git commit --no-verify -m "$COMMIT_MESSAGE" && git tag -f $TAG_ID
      - run:
          name: push main to origin, push new tag to origin
          command: git push origin main && git push origin $(git describe --abbrev=0 --tags)
      - run:
          name: delete release branch
          command: git push origin --delete release
  # Deploys rules and configured projects to Firebase.
  # COMPLETE CIRCLECI SETUP AND PROVIDE "FIREBASE_SECRETS_BASE64" ENVIRONMENT VARIABLE
  # IF YOU DONT HAVE A STAGING ENVIRONMENT, DELETE THE BELOW
  deploy-to-firebase-staging:
    <<: *defaults
    environment:
      NX_SKIP_NX_CACHE: "true"
      GOOGLE_APPLICATION_CREDENTIALS: firebase-secrets.json
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: decode firebase secrets
          command: echo $FIREBASE_SECRETS_BASE64_staging | base64 -d > ~/code/firebase-secrets.json
      - run:
          # NOTE: this uses make-env.js to produce a .env file that is uploaded. Ensure CircleCI has all required variables before release.
          name: deploy api to Firebase Functions staging
          command: npx nx run API_APP_NAME:ci-deploy-staging
      - run:
          name: deploy website to Firebase Hosting staging
          command: npx nx run ANGULAR_APP_NAME:ci-deploy-staging
      - run:
          name: deploy updated rules
          command: npx nx run workspace:ci-deploy-firebase-rules-staging
  deploy-to-firebase-prod:
    <<: *defaults
    environment:
      NX_SKIP_NX_CACHE: "true"
      GOOGLE_APPLICATION_CREDENTIALS: firebase-secrets.json
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: decode firebase secrets
          command: echo $FIREBASE_SECRETS_BASE64_prod | base64 -d > ~/code/firebase-secrets.json
      - run:
          # NOTE: this uses make-env.js to produce a .env file that is uploaded. Ensure CircleCI has all required variables before release.
          name: deploy api to Firebase Functions production
          command: npx nx run API_APP_NAME:ci-deploy-prod
      - run:
          name: deploy website to Firebase Hosting production
          command: npx nx run ANGULAR_APP_NAME:ci-deploy-prod
      - run:
          name: deploy updated rules
          command: npx nx run workspace:ci-deploy-firebase-rules-prod
  # Publishes content to npm. This should occur after running a release.
  # REMOVE IF YOU DO NOT NEED TO PUBLISH TO NPM
  publish-to-npm:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      # SETUP REQUIRED - Add your NPM token under the variable NPM_TOKEN on CircleCI for CircleCI to use.
      - run:
          name: configure npmrc / npm login
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run: npx nx run-many --target=publish-npmjs
# --- WORKFLOWS ---
workflows:
  version: 2
  # builds and tests the content. Occurs on every branch.
  build-and-test-and-version:
    jobs:
      - build
      - test-with-node:
          requires:
            - build
      - test-with-node-firebase:
          requires:
            - build
      - run-release-and-push-to-main:
          requires:
            - build
            - test-with-node
            - test-with-node-firebase
          filters:
            branches:
              only: release
  # Publishes to npm
  # REMOVE IF YOU DO NOT NEED TO PUBLISH TO NPM
  publish:
    jobs:
      - build:
          filters:
            branches:
              only: main
      - publish-to-npm:
          requires:
            - build
          filters:
            branches:
              only: main
  # Publishes to production
  publish-to-production:
    jobs:
      # Wait for approval before deploying to firebase
      # This prevents unnecessary deployments for smaller changes.
      - hold-deploy-to-firebase:
          type: approval
          filters:
            branches:
              only: main
      - build:
          filters:
            branches:
              only: main
      - deploy-to-firebase-prod:
          requires:
            - hold-deploy-to-firebase
            - build
          filters:
            branches:
              only: main
  # Publishes to staging
  publish-to-staging:
    jobs:
      # Wait for approval before deploying to firebase
      # This prevents unnecessary deployments for smaller changes.
      - hold-deploy-to-firebase:
          type: approval
          filters:
            branches:
              only: main
      - build:
          filters:
            branches:
              only: main
      - deploy-to-firebase-staging:
          requires:
            - hold-deploy-to-firebase
            - build
          filters:
            branches:
              only: main
