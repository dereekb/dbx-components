import { type PromiseOrValue } from '@dereekb/util';
import type * as functions from 'firebase-functions/v1';
import { type EventContext } from 'firebase-functions/v1';
import { type MakeNestContext, type NestApplicationFunctionFactory, type NestApplicationPromiseGetter } from '../../nest.provider';
import { type NestApplicationContextRequest, type NestContextRequest } from '../nest';

export type EventContextWithData<I> = EventContext & { data: I };
export type FirebaseEventNestApplicationRequest<I> = NestApplicationContextRequest<EventContextWithData<I>>;
export type FirebaseEventNestContextRequest<N, I> = NestContextRequest<N, EventContextWithData<I>>;

// MARK: From Firebase Event
export type FirebaseEventContextHandler<I = unknown, O = unknown> = (data: I, context: EventContext) => PromiseOrValue<O>;

// MARK: Event
export type NestApplicationEventHandler<I = unknown, O = unknown> = (event: FirebaseEventNestApplicationRequest<I>) => PromiseOrValue<O>;
export type NestApplicationEventHandlerBuilder<I = unknown, O = unknown> = (handler: NestApplicationEventHandler<I, O>) => FirebaseEventContextHandler<I, O>;

export type OnEventWithNestApplicationBuilder<I = unknown, O = unknown> = (nest: NestApplicationEventHandlerBuilder<I, O>) => functions.CloudFunction<I>;

/**
 * Factory function for generating a CloudFunctionHandler via a NestApplicationCloudFunctionHandler.
 */
export type OnEventWithNestApplicationFactory = <I, O>(fn: OnEventWithNestApplicationBuilder<I, O>) => NestApplicationFunctionFactory<functions.CloudFunction<I>>;

/**
 * Creates a factory for generating OnEventWithNestApplicationBuilder values.
 *
 * @param nestAppPromiseGetter
 * @returns
 */
export function onEventWithNestApplicationFactory(): OnEventWithNestApplicationFactory {
  return <I, O>(fn: OnEventWithNestApplicationBuilder<I, O>) => {
    return (nestAppPromiseGetter: NestApplicationPromiseGetter) => {
      const handlerBuilder: NestApplicationEventHandlerBuilder<I, O> = (handler) => {
        const fnHandler: FirebaseEventContextHandler<I, O> = (data, context) =>
          nestAppPromiseGetter().then((nestApplication) =>
            handler({
              ...context,
              data,
              nestApplication
            })
          );
        return fnHandler;
      };

      return fn(handlerBuilder);
    };
  };
}

export type NestContextEventHandler<N, I = unknown, O = unknown> = (request: FirebaseEventNestContextRequest<N, I>) => Promise<O>;
export type NestContextEventHandlerBuilder<N, I = unknown, O = unknown> = (handler: NestContextEventHandler<N, I, O>) => FirebaseEventContextHandler<I, O>;

/**
 * Runnable function that is passed an arbitrary nest context object in addition to the usual data/context provided by firebase.
 */
export type OnEventWithNestContextBuilder<N, I = unknown, O = unknown> = (nest: NestContextEventHandlerBuilder<N, I, O>) => functions.CloudFunction<I>;

/**
 * Factory function for generating a firebase CloudFunction for a specific event.
 */
export type OnEventWithNestContextFactory<N> = <I, O = unknown>(fn: OnEventWithNestContextBuilder<N, I, O>) => NestApplicationFunctionFactory<functions.CloudFunction<I>>;

/**
 * Creates a factory for generating OnCallWithNestContext functions with a nest context object that is generated by the input function.
 *
 * @param appFactory
 * @param makeNestContext
 * @returns
 */
export function onEventWithNestContextFactory<N>(makeNestContext: MakeNestContext<N>): OnEventWithNestContextFactory<N> {
  return <I, O = unknown>(fn: OnEventWithNestContextBuilder<N, I, O>) => {
    return (nestAppPromiseGetter: NestApplicationPromiseGetter) => {
      const handlerBuilder: NestContextEventHandlerBuilder<N, I, O> = (handler) => {
        const fnHandler: FirebaseEventContextHandler<I, O> = (data, context) =>
          nestAppPromiseGetter().then((nestApplication) =>
            handler({
              ...context,
              data,
              nest: makeNestContext(nestApplication)
            })
          );

        return fnHandler;
      };

      return fn(handlerBuilder);
    };
  };
}
