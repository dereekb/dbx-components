@use 'sass:map';
@use 'sass:list';
@use 'sass:color';
@use '../style/theming';

// MARK: Variables
$button-spacer-width: 6px;
$big-button-height: 46px; // 33% bigger

// MARK: Mixin
@mixin core() {
  // increases the height of the mat-mdc-button
  .dbx-button-big {
    .mdc-button.mat-mdc-button {
      height: $big-button-height;
    }
  }

  .dbx-button-wide {
    .dbx-button {
      min-width: 120px;
      max-width: 100%;
    }
  }

  dbx-button.dbx-w100,
  dbx-button.dbx-button-wide {
    // when using dbx-w100 with dbx-button, make the button full width
    .dbx-button {
      width: 100%;
    }
  }

  .dbx-icon-button .mat-mdc-button .mdc-button__label {
    display: flex;
    align-items: center;
  }

  .dbx-button-text-option-button {
    .dbx-button {
      margin-bottom: 6px;
    }

    .dbx-base-button .mdc-button__label {
      padding: 8px 0;
    }
  }

  .dbx-grow-button {
    width: 100%;

    .dbx-button {
      width: 100%;
    }
  }

  .dbx-button-spacer {
    padding-right: $button-spacer-width;
  }

  .mat-icon-button.dbx-button-spacer {
    margin-right: $button-spacer-width;
  }

  .dbx-button-column {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-items: center;

    > * {
      margin-bottom: 6px !important;
    }
  }
}

@mixin color($theme-config) {
  .dbx-icon-button > .mat-mdc-button {
    background: inherit;

    &.mat-unthemed {
      // TEMPORARY: For now we just unset the ripple colors but later we want to make sure that
      // the colors from dbx-primary, dbx-accent, etc... are set on these label colors instead
      // for buttons. Button column isn't correct for now either...
      --mdc-text-button-label-text-color: unset;
      --mat-mdc-button-persistent-ripple-color: unset;
    }
  }

  .dbx-icon-button.dbx-grey-bg {
    background: none;

    > .mat-mdc-button {
      background: #{theming.$dbx-grey-color-contrast};
    }
  }

  .dbx-icon-button.dbx-disabled-bg {
    background: none;

    > .mat-mdc-button {
      background: #{theming.$dbx-disabled-color-contrast};
    }
  }

  // dbx-theme colors
  @each $color, $colorConfig in theming.$dbx-theme-extra-colors-main {
    .dbx-base-button.mat-mdc-unelevated-button.mat-#{$color} {
      --mdc-filled-button-container-color: #{map.get($colorConfig, 'color')};
      --mdc-filled-button-label-text-color: #{map.get($colorConfig, 'contrast')};
    }

    .dbx-base-button.mat-mdc-outlined-button.mat-#{$color} {
      --mdc-outlined-button-label-text-color: #{map.get($colorConfig, 'color')};
    }

    .dbx-base-button.mat-mdc-raised-button.mat-#{$color} {
      --mdc-protected-button-container-color: #{map.get($colorConfig, 'color')};
      --mdc-protected-button-label-text-color: #{map.get($colorConfig, 'contrast')};
    }

    .dbx-base-button.mat-mdc-button.mat-#{$color} {
      --mdc-text-button-label-text-color: #{map.get($colorConfig, 'color')};
    }
  }
}

@mixin typography($theme-config-or-typography-config) {
}

@mixin theme($theme-config) {
  @include theming.private-check-duplicate-theme-styles($theme-config, 'dbx-button') {
    $color: theming.m2-get-color-config($theme-config);
    $density: theming.m2-get-density-config($theme-config);
    $typography: theming.m2-get-typography-config($theme-config);

    @if $color !=null {
      @include color($theme-config);
    }

    @if $typography !=null {
      @include typography($theme-config);
    }
  }
}
