version: 2.1 # use CircleCI 2.1

# YAML trick
defaults: &defaults
  working_directory: ~/code # "code" is our working directory
  resource_class: large
  docker:
    - image: cimg/node:22.14

# https://circleci.com/blog/config-best-practices-dependency-caching/

orbs:
  nx: nrwl/nx@1.7.0
  node: circleci/node@7.1.0
  snyk: snyk/snyk@2.2.0

jobs:
  build:
    <<: *defaults
    parameters:
      persist_build_to_workspace:
        type: boolean
        default: true
      scan_with_snyk:
        type: boolean
        default: true
    environment:
      CYPRESS_INSTALL_BINARY: 0
      NX_NO_CLOUD: "true"
    steps:
      - checkout
      # install node packages
      - node/install-packages
      # scan vulnerabilities with snyk if enabled
      - when:
          condition: << parameters.scan_with_snyk >>
          steps:
            - snyk/scan:
                fail-on-issues: true
                monitor-on-build: true
                severity-threshold: critical
      # initialize nx
      - nx/set-shas
      # builds everything in the project in order
      - run:
          name: build
          command: npx nx run workspace:build-all
      # persist builds to workspace if persist_build_to_workspace is true
      # NOTE: it is always true in this config
      - when:
          condition: << parameters.persist_build_to_workspace >>
          steps:
            - persist_to_workspace:
                root: ~/code
                paths:
                  - node_modules
                  - dist
  # Runs tests for the projects that do not require the firebase emulators and are more basic
  test-with-node-basic:
    <<: *defaults
    environment:
      NX_CLOUD_DISTRIBUTED_EXECUTION: "false"
      NX_NO_CLOUD: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: run util tests
          command: npx nx run-all-tests util
      - run:
          name: run rxjs tests
          command: npx nx test rxjs
      - run:
          name: run model tests
          command: npx nx test model
      - run:
          name: run date tests local
          command: npx nx test date
      - run:
          name: run date tests usa
          command: npx nx test-timezones-usa date
      - run:
          name: run date tests world
          command: npx nx test-timezones-world date
      - store_test_results:
          path: ~/code/.reports/jest/
  # Runs tests for the projects that do not require the firebase emulators and are more complex (nestjs, angular)
  test-with-node-complex:
    <<: *defaults
    environment:
      NX_CLOUD_DISTRIBUTED_EXECUTION: "false"
      NX_NO_CLOUD: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: run dbx-analytics tests
          command: npx nx test dbx-analytics
      - run:
          name: run dbx-core tests
          command: npx nx test dbx-core
      - run:
          name: run dbx-web tests
          command: npx nx test dbx-web
      - run:
          name: run dbx-form tests
          command: npx nx test dbx-form
      - run:
          name: run nestjs tests
          command: npx nx run-all-tests nestjs
      - run:
          name: run zoho tests
          command: npx nx run-all-tests zoho
      - store_test_results:
          path: ~/code/.reports/jest/
  # Runs tests for the projects that require the firebase emulators.
  test-with-node-firebase:
    <<: *defaults
    environment:
      # https://github.com/firebase/firebase-tools/issues/6765
      GCE_METADATA_HOST: 0.0.0.0
      DETECT_GCP_RETRIES: 0
      METADATA_SERVER_DETECTION: none
      NX_CLOUD_DISTRIBUTED_EXECUTION: "false"
      NX_NO_CLOUD: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run: sudo apt-get update -y && sudo apt-get install -y curl openjdk-11-jre-headless
      - restore_cache:
          key: firebase-cache-
      - run:
          name: run firebase tests
          command: npx firebase --project=default emulators:exec --only auth,firestore,storage 'npx nx run-all-tests firebase'
      - run:
          name: run firebase-server tests
          command: npx firebase --project=default emulators:exec --only auth,firestore,storage 'npx nx run-all-tests firebase-server'
      - run:
          name: run dbx-firebase tests
          command: npx firebase --project=default emulators:exec --only auth,firestore,storage 'npx nx run-tests dbx-firebase'
      - run:
          name: run demo-api tests
          command: npx firebase --project=default emulators:exec --only auth,firestore,storage 'npx nx run-tests demo-api'
      - save_cache:
          key: firebase-cache-
          paths:
            - ~/.cache/firebase
      - store_test_results:
          path: ~/code/.reports/jest/
  # Runs tests for the projects that require the firebase emulators.
  test-setup-script:
    <<: *defaults
    environment:
      NX_CLOUD_DISTRIBUTED_EXECUTION: "false"
      NX_NO_CLOUD: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run: sudo apt-get update -y && sudo apt-get install -y curl openjdk-11-jre-headless
      - restore_cache:
          key: firebase-cache-
      - run:
          name: setup git
          command: git config --global user.email "ci@dereekb.com" && git config --global user.name "ci"
      - run:
          name: "Setup env vars for setup script"
          command: echo -e 'export DBX_SETUP_PROJECT_IS_CI_TEST="y"\nDBX_SETUP_PROJECT_BRANCH="$CIRCLE_BRANCH"\nDBX_SETUP_PROJECT_MANUAL="n"' >> $BASH_ENV
      - run:
          name: Create output folder for setup-project.sh testing
          command: mkdir ~/setup-test
      - run:
          name: run setup-project.sh script
          command: cd setup && ./setup-project.sh myprojectapp myproject myproject 9200 ~/setup-test
      - run:
          name: replace test project's @dereekb in node_modules with generated packages (we don't want symlinks)
          command: rm -r ~/setup-test/myproject/node_modules/@dereekb && cp -r dist/packages ~/setup-test/myproject/node_modules/@dereekb
      - run:
          name: print package.json
          command: cd ~/setup-test/myproject && cat package.json
      - run:
          name: Try build components
          command: cd ~/setup-test/myproject && npx nx run-many --target=build-base --projects=myproject-firebase,myproject-components
      - run:
          name: Try build
          command: cd ~/setup-test/myproject && npx -y nx build myproject && npx -y nx build myproject-api
      - run:
          name: Run tests
          command: cd ~/setup-test/myproject && npx nx test myproject-components && npx nx test myproject-firebase && npx nx test myproject && npx firebase --project=default emulators:exec --only auth,firestore,storage 'npx nx run-tests myproject-api'
    # todo: add checks, etc.
  # Performs release operations on the release branch.
  run-release-and-push-to-main:
    <<: *defaults
    environment:
      NX_CLOUD_DISTRIBUTED_EXECUTION: "false"
      NX_NO_CLOUD: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - add_ssh_keys:
          fingerprints:
            - "d9:53:28:55:d6:96:4e:1e:d1:53:5e:79:e4:80:7e:28"
      - run:
          name: setup git
          command: git config user.email "ci@dereekb.com" && git config user.name "ci"
      - run:
          name: build release
          command: npx nx run --parallel=1 workspace:version
      - run:
          # we grab the relevant tag names before swapping to main
          name: "setup env vars for git changes"
          command: echo -e "export DEV_TAG_ID=$(git describe --tags --abbrev=0 HEAD^)\nTAG_ID=$(git describe --tags --abbrev=0)" >> $BASH_ENV
      - run:
          # copy the commit message before we swap branches, or it will include unrelated changes. Move tag to the main branch after making the merge commit into main
          name: merge release into main and use the release commit message, move tag from release to main
          command: COMMIT_MESSAGE=$(git log $DEV_TAG_ID..release --pretty=%B | cat) && echo "merging new release ($TAG_ID) into main. Adding all commits since last dev tag ($DEV_TAG_ID)" && git checkout main && git merge release --squash -Xtheirs && git commit --no-verify -m "$COMMIT_MESSAGE" && git tag -f $TAG_ID
      - run:
          name: push main to origin, push new tag to origin
          command: git push origin main && git push origin $(git describe --abbrev=0 --tags)
      - run:
          name: delete release branch
          command: git push origin --delete release
  # Deploys rules and configured projects to Firebase.
  deploy-to-firebase:
    <<: *defaults
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: firebase-secrets.json
      NX_CLOUD_DISTRIBUTED_EXECUTION: "false"
      NX_NO_CLOUD: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: decode firebase secrets
          command: echo $FIREBASE_SECRETS_BASE64 | base64 -d > ~/code/firebase-secrets.json
      - run:
          # NOTE: this uses make-env.js to produce a .env file that is uploaded. Ensure CircleCI has all required variables before release.
          name: deploy api to Firebase Functions
          command: npx nx run demo-api:ci-deploy
      - run:
          name: deploy demo website to Firebase Hosting
          command: npx nx run demo:ci-deploy
      - run:
          name: deploy updated rules
          command: npx nx run workspace:ci-deploy-firebase-rules
  # Publishes content to npm. This should occur after running a release.
  publish-to-npm:
    <<: *defaults
    environment:
      NX_CLOUD_DISTRIBUTED_EXECUTION: "false"
      NX_NO_CLOUD: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: configure npmrc / npm login
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run:
          name: Run lint fix to update any npm dependencies in the projects before building
          command: ./lint-fix-all.sh || true # ignore error
      # - run: npx nx affected --target=publish-npmjs --all
      # npm can potentially have issues with showing the newest package if a required dependency isn't available when published.
      # since these dependencies rely on eachother, they should be published in dependency order
      - run: npx nx run util:publish-npmjs && npx nx run rxjs:publish-npmjs
      - run: npx nx run date:publish-npmjs && npx nx run model:publish-npmjs && npx nx run browser:publish-npmjs
      - run: npx nx run nestjs:publish-npmjs && npx nx run firebase:publish-npmjs && npx nx run firebase-server:publish-npmjs
      - run: npx nx run zoho:publish-npmjs
      - run: npx nx run dbx-core:publish-npmjs && npx nx run dbx-web:publish-npmjs && npx nx run dbx-analytics:publish-npmjs && npx nx run dbx-form:publish-npmjs
      - run: npx nx run dbx-firebase:publish-npmjs
# --- WORKFLOWS ---
workflows:
  version: 2
  # builds and tests the content. Occurs on every branch.
  build-and-test-and-version:
    jobs:
      - build
      - test-with-node-basic:
          requires:
            - build
      - test-with-node-complex:
          requires:
            - build
      - test-with-node-firebase:
          requires:
            - build
      - test-setup-script:
          requires:
            - build
      - run-release-and-push-to-main:
          requires:
            - build
            - test-with-node-basic
            - test-with-node-complex
            - test-with-node-firebase
            - test-setup-script
          filters:
            branches:
              only: release
  # Publishes to npm
  publish:
    jobs:
      - build:
          filters:
            branches:
              only: main
      - publish-to-npm:
          requires:
            - build
          filters:
            branches:
              only: main
  # Deploy to Firebase
  deploy:
    jobs:
      # Wait for approval before deploying to firebase
      # This prevents unnecessary deployments for smaller changes.
      - hold-deploy-to-firebase:
          type: approval
          filters:
            branches:
              only: main
      - build:
          filters:
            branches:
              only: main
          requires:
            - hold-deploy-to-firebase
      - deploy-to-firebase:
          requires:
            - hold-deploy-to-firebase
            - build
          filters:
            branches:
              only: main
