{
  "name": "demo-api",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "apps/demo-api/src",
  "projectType": "application",
  "targets": {
    "build": {
      "executor": "nx:run-commands",
      "outputs": ["{workspaceRoot}/dist/apps/demo-api"],
      "options": {
        "commands": [
          {
            "description": "make api package.json",
            "command": "npx nx run demo-api:build-package-json"
          },
          {
            "description": "build api",
            "command": "npx nx run demo-api:build-base"
          }
        ],
        "color": true
      }
    },
    "build-base": {
      "executor": "@nx/webpack:webpack",
      "inputs": ["{projectRoot}/**/*.ts", "!{projectRoot}/**/*.spec.ts"],
      "outputs": ["{options.outputPath}"],
      "options": {
        "excludeLibsInPackageJson": true,
        "webpackConfig": "apps/demo-api/webpack.config.js",
        "outputPath": "dist/apps/demo-api",
        "main": "apps/demo-api/src/main.ts",
        "tsConfig": "apps/demo-api/tsconfig.app.json",
        "assets": ["apps/demo-api/src/assets"],
        "generatePackageJson": true,
        "compiler": "tsc",
        "target": "node"
      },
      "configurations": {
        "production": {
          "optimization": true,
          "extractLicenses": false,
          "sourceMap": false,
          "inspect": false,
          "fileReplacements": [
            {
              "replace": "apps/demo-api/src/environments/environment.ts",
              "with": "apps/demo-api/src/environments/environment.prod.ts"
            }
          ]
        }
      }
    },
    "run-emulators": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npx env-cmd -f .env.local --use-shell 'npx firebase --project=default emulators:start --import=/root/data/emulators --export-on-exit'"
      }
    },
    "watch-emulators": {
      "executor": "nx:run-commands",
      "options": {
        "command": "echo 'starting server in 5...'; sleep 5; while sleep 2; do find dist/apps/demo-api | entr -r -s './wait-for-ports.sh && npx env-cmd -f .env.local --use-shell npx firebase --project=default emulators:start --import=/root/data/emulators --export-on-exit'; done"
      }
    },
    "serve": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          {
            "command": "npx nx build-base demo-api --watch"
          },
          {
            "command": "npx nx run demo-api:watch-emulators"
          }
        ],
        "parallel": true
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint",
      "outputs": ["{options.outputFile}"]
    },
    "test": {
      "executor": "nx:run-commands",
      "options": {
        "command": "./exec-with-emulator.sh 'npx nx run-tests demo-api'"
      }
    },
    "run-tests": {
      "executor": "@nx/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/apps/demo-api", "{projectRoot}/.reports/jest/demo-api.junit.xml"],
      "options": {
        "jestConfig": "apps/demo-api/jest.config.ts"
      }
    },
    "watch": {
      "executor": "nx:run-commands",
      "options": {
        "command": "./exec-with-emulator.sh 'npx nx run-tests demo-api --watch'"
      }
    },
    "make-env": {
      "executor": "nx:run-commands",
      "options": {
        "command": "node ./make-env.js prod > dist/apps/demo-api/.env && cp .env.prod dist/apps/demo-api/.env.prod"
      }
    },
    "build-package-json": {
      "executor": "nx:run-commands",
      "options": {
        "command": "node ./make-api-package.js > apps/demo-api/package.json"
      }
    },
    "ci-deploy": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          {
            "command": "npx nx run demo-api:build-base:production"
          },
          {
            "command": "npx nx make-env demo-api --skip-nx-cache"
          },
          {
            "command": "npx firebase --project=prod deploy --only functions --force"
          }
        ],
        "parallel": false
      }
    }
  },
  "implicitDependencies": ["!util-test"],
  "tags": []
}
